import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,e as n,o as i}from"./app-CuAYvg6V.js";const t={};function p(l,a){return i(),s("div",null,a[0]||(a[0]=[n(`<h1 id="基础" tabindex="-1"><a class="header-anchor" href="#基础"><span>基础</span></a></h1><p>分布式事务</p><h2 id="下载" tabindex="-1"><a class="header-anchor" href="#下载"><span>下载</span></a></h2><p><a href="https://github.com/apache/incubator-seata/releases" target="_blank" rel="noopener noreferrer">https://github.com/apache/incubator-seata/releases</a></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>Usage: sh seata-server.sh(for linux and mac) or cmd seata-server.bat(for windows) [options]</span></span>
<span class="line"><span>  Options:</span></span>
<span class="line"><span>    --host, -h</span></span>
<span class="line"><span>      The address is expose to registration center and other service can access seata-server via this ip</span></span>
<span class="line"><span>      Default: 0.0.0.0</span></span>
<span class="line"><span>    --port, -p</span></span>
<span class="line"><span>      The port to listen.</span></span>
<span class="line"><span>      Default: 8091</span></span>
<span class="line"><span>    --storeMode, -m</span></span>
<span class="line"><span>      log store mode : file、db</span></span>
<span class="line"><span>      Default: file</span></span>
<span class="line"><span>    --help</span></span>
<span class="line"><span></span></span>
<span class="line"><span>e.g.</span></span>
<span class="line"><span></span></span>
<span class="line"><span>sh seata-server.sh -p 8091 -h 127.0.0.1 -m file</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="各事务模式" tabindex="-1"><a class="header-anchor" href="#各事务模式"><span>各事务模式</span></a></h2><h3 id="at模式" tabindex="-1"><a class="header-anchor" href="#at模式"><span>AT模式</span></a></h3><h4 id="前提" tabindex="-1"><a class="header-anchor" href="#前提"><span>前提</span></a></h4><ul><li>基于支持本地 ACID 事务的关系型数据库。</li><li>Java 应用，通过 JDBC 访问数据库。</li></ul><h4 id="整体机制" tabindex="-1"><a class="header-anchor" href="#整体机制"><span>整体机制</span></a></h4><p>两阶段提交协议的演变：</p><ul><li>一阶段：业务数据和回滚日志记录在同一个本地事务中提交，释放本地锁和连接资源。</li><li>二阶段： <ul><li>提交异步化，非常快速地完成。</li><li>回滚通过一阶段的回滚日志进行反向补偿。</li></ul></li></ul><h4 id="写隔离" tabindex="-1"><a class="header-anchor" href="#写隔离"><span>写隔离</span></a></h4><ul><li>一阶段本地事务提交前，需要确保先拿到 <strong>全局锁</strong> 。</li><li>拿不到 <strong>全局锁</strong> ，不能提交本地事务。</li><li>拿 <strong>全局锁</strong> 的尝试被限制在一定范围内，超出范围将放弃，并回滚本地事务，释放本地锁。</li></ul><h4 id="读隔离" tabindex="-1"><a class="header-anchor" href="#读隔离"><span>读隔离</span></a></h4><p>在数据库本地事务隔离级别 读已提交（Read Committed） 或以上的基础上，Seata（AT 模式）的默认全局隔离级别是 读未提交（Read Uncommitted） 。</p><p>如果应用在特定场景下，必需要求全局的 读已提交 ，目前 Seata 的方式是通过 SELECT FOR UPDATE 语句的代理。</p><p>Read Isolation: SELECT FOR UPDATE</p><p>SELECT FOR UPDATE 语句的执行会申请 全局锁 ，如果 全局锁 被其他事务持有，则释放本地锁（回滚 SELECT FOR UPDATE 语句的本地执行）并重试。这个过程中，查询是被 block 住的，直到 全局锁 拿到，即读取的相关数据是 已提交 的，才返回。</p><p>出于总体性能上的考虑，Seata 目前的方案并没有对所有 SELECT 语句都进行代理，仅针对 FOR UPDATE 的 SELECT 语句。</p>`,20)]))}const c=e(t,[["render",p]]),d=JSON.parse('{"path":"/java/SpringCloudAlibaba/seata/basis.html","title":"基础","lang":"zh-CN","frontmatter":{"description":"基础 分布式事务 下载 https://github.com/apache/incubator-seata/releases 各事务模式 AT模式 前提 基于支持本地 ACID 事务的关系型数据库。 Java 应用，通过 JDBC 访问数据库。 整体机制 两阶段提交协议的演变： 一阶段：业务数据和回滚日志记录在同一个本地事务中提交，释放本地锁和连接资源...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"基础\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-10-08T03:40:12.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"憨憨十二\\",\\"url\\":\\"https://mister-hope.com\\"}]}"],["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/java/SpringCloudAlibaba/seata/basis.html"}],["meta",{"property":"og:site_name","content":"一切为了更好的自己"}],["meta",{"property":"og:title","content":"基础"}],["meta",{"property":"og:description","content":"基础 分布式事务 下载 https://github.com/apache/incubator-seata/releases 各事务模式 AT模式 前提 基于支持本地 ACID 事务的关系型数据库。 Java 应用，通过 JDBC 访问数据库。 整体机制 两阶段提交协议的演变： 一阶段：业务数据和回滚日志记录在同一个本地事务中提交，释放本地锁和连接资源..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-10-08T03:40:12.000Z"}],["meta",{"property":"article:modified_time","content":"2024-10-08T03:40:12.000Z"}]]},"git":{"createdTime":1701136723000,"updatedTime":1728358812000,"contributors":[{"name":"hanhan12","username":"hanhan12","email":"1607077440@qq.com","commits":1,"url":"https://github.com/hanhan12"},{"name":"consen3464","username":"consen3464","email":"wangkai@consen.net","commits":1,"url":"https://github.com/consen3464"}]},"readingTime":{"minutes":1.6,"words":480},"filePathRelative":"java/SpringCloudAlibaba/seata/basis.md","autoDesc":true}');export{c as comp,d as data};
