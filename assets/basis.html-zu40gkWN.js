import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,b as i,o as n}from"./app-IPkfDkxj.js";const s={};function l(r,e){return n(),t("div",null,e[0]||(e[0]=[i(`<h1 id="基础" tabindex="-1"><a class="header-anchor" href="#基础"><span>基础</span></a></h1><p>分布式事务</p><h2 id="下载" tabindex="-1"><a class="header-anchor" href="#下载"><span>下载</span></a></h2><p>https://github.com/apache/incubator-seata/releases</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>Usage: sh seata-server.sh(for linux and mac) or cmd seata-server.bat(for windows) [options]
  Options:
    --host, -h
      The address is expose to registration center and other service can access seata-server via this ip
      Default: 0.0.0.0
    --port, -p
      The port to listen.
      Default: 8091
    --storeMode, -m
      log store mode : file、db
      Default: file
    --help

e.g.

sh seata-server.sh -p 8091 -h 127.0.0.1 -m file
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="各事务模式" tabindex="-1"><a class="header-anchor" href="#各事务模式"><span>各事务模式</span></a></h2><h3 id="at模式" tabindex="-1"><a class="header-anchor" href="#at模式"><span>AT模式</span></a></h3><h4 id="前提" tabindex="-1"><a class="header-anchor" href="#前提"><span>前提</span></a></h4><ul><li>基于支持本地 ACID 事务的关系型数据库。</li><li>Java 应用，通过 JDBC 访问数据库。</li></ul><h4 id="整体机制" tabindex="-1"><a class="header-anchor" href="#整体机制"><span>整体机制</span></a></h4><p>两阶段提交协议的演变：</p><ul><li>一阶段：业务数据和回滚日志记录在同一个本地事务中提交，释放本地锁和连接资源。</li><li>二阶段： <ul><li>提交异步化，非常快速地完成。</li><li>回滚通过一阶段的回滚日志进行反向补偿。</li></ul></li></ul><h4 id="写隔离" tabindex="-1"><a class="header-anchor" href="#写隔离"><span>写隔离</span></a></h4><ul><li>一阶段本地事务提交前，需要确保先拿到 <strong>全局锁</strong> 。</li><li>拿不到 <strong>全局锁</strong> ，不能提交本地事务。</li><li>拿 <strong>全局锁</strong> 的尝试被限制在一定范围内，超出范围将放弃，并回滚本地事务，释放本地锁。</li></ul><h4 id="读隔离" tabindex="-1"><a class="header-anchor" href="#读隔离"><span>读隔离</span></a></h4><p>在数据库本地事务隔离级别 读已提交（Read Committed） 或以上的基础上，Seata（AT 模式）的默认全局隔离级别是 读未提交（Read Uncommitted） 。</p><p>如果应用在特定场景下，必需要求全局的 读已提交 ，目前 Seata 的方式是通过 SELECT FOR UPDATE 语句的代理。</p><p>Read Isolation: SELECT FOR UPDATE</p><p>SELECT FOR UPDATE 语句的执行会申请 全局锁 ，如果 全局锁 被其他事务持有，则释放本地锁（回滚 SELECT FOR UPDATE 语句的本地执行）并重试。这个过程中，查询是被 block 住的，直到 全局锁 拿到，即读取的相关数据是 已提交 的，才返回。</p><p>出于总体性能上的考虑，Seata 目前的方案并没有对所有 SELECT 语句都进行代理，仅针对 FOR UPDATE 的 SELECT 语句。</p>`,20)]))}const c=a(s,[["render",l],["__file","basis.html.vue"]]),p=JSON.parse('{"path":"/java/SpringCloudAlibaba/seata/basis.html","title":"基础","lang":"zh-CN","frontmatter":{"description":"基础 分布式事务 下载 https://github.com/apache/incubator-seata/releases 各事务模式 AT模式 前提 基于支持本地 ACID 事务的关系型数据库。 Java 应用，通过 JDBC 访问数据库。 整体机制 两阶段提交协议的演变： 一阶段：业务数据和回滚日志记录在同一个本地事务中提交，释放本地锁和连接资源...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/my-docs/java/SpringCloudAlibaba/seata/basis.html"}],["meta",{"property":"og:site_name","content":"一切为了更好的自己"}],["meta",{"property":"og:title","content":"基础"}],["meta",{"property":"og:description","content":"基础 分布式事务 下载 https://github.com/apache/incubator-seata/releases 各事务模式 AT模式 前提 基于支持本地 ACID 事务的关系型数据库。 Java 应用，通过 JDBC 访问数据库。 整体机制 两阶段提交协议的演变： 一阶段：业务数据和回滚日志记录在同一个本地事务中提交，释放本地锁和连接资源..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-10-08T03:40:12.000Z"}],["meta",{"property":"article:author","content":"憨憨十二"}],["meta",{"property":"article:modified_time","content":"2024-10-08T03:40:12.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"基础\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-10-08T03:40:12.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"憨憨十二\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"下载","slug":"下载","link":"#下载","children":[]},{"level":2,"title":"各事务模式","slug":"各事务模式","link":"#各事务模式","children":[{"level":3,"title":"AT模式","slug":"at模式","link":"#at模式","children":[{"level":4,"title":"前提","slug":"前提","link":"#前提","children":[]},{"level":4,"title":"整体机制","slug":"整体机制","link":"#整体机制","children":[]},{"level":4,"title":"写隔离","slug":"写隔离","link":"#写隔离","children":[]},{"level":4,"title":"读隔离","slug":"读隔离","link":"#读隔离","children":[]}]}]}],"git":{"createdTime":1701136723000,"updatedTime":1728358812000,"contributors":[{"name":"consen3464","email":"wangkai@consen.net","commits":1},{"name":"hanhan12","email":"1607077440@qq.com","commits":1}]},"readingTime":{"minutes":1.6,"words":480},"filePathRelative":"java/SpringCloudAlibaba/seata/basis.md","localizedDate":"2023年11月28日","autoDesc":true}');export{c as comp,p as data};
