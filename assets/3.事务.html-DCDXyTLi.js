import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,e as a,o as n}from"./app-BQPzs645.js";const t={};function l(d,s){return n(),e("div",null,s[0]||(s[0]=[a(`<h1 id="_3-事务" tabindex="-1"><a class="header-anchor" href="#_3-事务"><span>3.事务</span></a></h1><p>可以一次执行多个命令，本质是一组命令的集合，一个事务中的所有命令都会序列化，<strong>按顺序地串行化执行而不会被其他命令插入，不许加塞</strong></p><h1 id="redis事务-vs-数据库事务" tabindex="-1"><a class="header-anchor" href="#redis事务-vs-数据库事务"><span><strong>Redis事务 VS 数据库事务</strong></span></a></h1><table><thead><tr><th>1.单独的隔离操作</th><th>Redis的事务仅仅是保证事务里的操作会被连续独占的执行，redis命令执行是单线程架构，在执行完事务内所有指令前是不可能再去同时执行其他客户端的请求的</th></tr></thead><tbody><tr><td>2.没有隔离级别的概念</td><td>因为事务提交前任何指令都不会被实际执行，也就不存在”事务内的查询要看到事务里的更新，在事务外查询不能看到”这种问题了</td></tr><tr><td>3.不保证原子性</td><td>Redis的事务不保证原子性，也就是不保证所有指令同时成功或同时失败，只有决定是否开始执行全部指令的能力，没有执行到一半进行回滚的能力</td></tr><tr><td>4.排它性</td><td>Redis会保证一个事务内的命令依次执行，而不会被其它命令插入</td></tr></tbody></table><h1 id="命令" tabindex="-1"><a class="header-anchor" href="#命令"><span>命令</span></a></h1><ul><li><p><code>MULTI</code> 标记事务开始</p></li><li><p><code>EXEC</code> 执行事务</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">127.0.0.1:6379</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">multi</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">OK</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">127.0.0.1:6379(TX</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)&gt; set k5 test</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">QUEUED</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">127.0.0.1:6379(TX</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)&gt; set k6 test1</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">QUEUED</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">127.0.0.1:6379(TX</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)&gt; exec</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) OK</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) OK</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>DISCARD</code> 取消事务，放弃执行</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">127.0.0.1:6379</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">multi</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">OK</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">127.0.0.1:6379(TX</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)&gt; set k3 sss</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">QUEUED</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">127.0.0.1:6379(TX</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)&gt; discard</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">OK</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>WATCH key [key …]</code> 监视一个或多个key，如果在事务执行之前，所监视的key被其他命令改动，那么事务被打断</p></li><li><p><code>UNWATCH</code> 取消所有key的监视</p></li></ul><h2 id="执行错误" tabindex="-1"><a class="header-anchor" href="#执行错误"><span>执行错误</span></a></h2><ul><li>如果在<code>exec</code> 前出现报错（语法错误等），Redis会直接返回错误，所有的命令都不会执行</li><li>如果在<code>exec</code> 执行后报错（运行错误），执行错误的命令不会执行，其他命令照常执行</li></ul><blockquote><p>Redis不提供事务回滚，发生错误后，自行恢复数据库</p></blockquote><h2 id="watch" tabindex="-1"><a class="header-anchor" href="#watch"><span>watch</span></a></h2><p>如果监视的key被其他命令改动，<strong>整个事务</strong>执行失败</p><p>一旦执行了exec之前加的监控锁都会被取消掉</p><p>当客户端连接丢失的时候(比如退出链接)，所有东西都会被取消监视</p>`,13)]))}const r=i(t,[["render",l]]),c=JSON.parse('{"path":"/dbs/redis/3.%E4%BA%8B%E5%8A%A1.html","title":"事务","lang":"zh-CN","frontmatter":{"title":"事务","order":4,"description":"3.事务 可以一次执行多个命令，本质是一组命令的集合，一个事务中的所有命令都会序列化，按顺序地串行化执行而不会被其他命令插入，不许加塞 Redis事务 VS 数据库事务 命令 MULTI 标记事务开始 EXEC 执行事务 DISCARD 取消事务，放弃执行 WATCH key [key …] 监视一个或多个key，如果在事务执行之前，所监视的key被其...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"事务\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-06-14T09:34:35.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"憨憨十二\\",\\"url\\":\\"https://mister-hope.com\\"}]}"],["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/my-docs/dbs/redis/3.%E4%BA%8B%E5%8A%A1.html"}],["meta",{"property":"og:site_name","content":"一切为了更好的自己"}],["meta",{"property":"og:title","content":"事务"}],["meta",{"property":"og:description","content":"3.事务 可以一次执行多个命令，本质是一组命令的集合，一个事务中的所有命令都会序列化，按顺序地串行化执行而不会被其他命令插入，不许加塞 Redis事务 VS 数据库事务 命令 MULTI 标记事务开始 EXEC 执行事务 DISCARD 取消事务，放弃执行 WATCH key [key …] 监视一个或多个key，如果在事务执行之前，所监视的key被其..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-14T09:34:35.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-14T09:34:35.000Z"}]]},"git":{"createdTime":1695377321000,"updatedTime":1718357675000,"contributors":[{"name":"wangkai","username":"wangkai","email":"wangkai@yqun.com.cn","commits":1,"url":"https://github.com/wangkai"},{"name":"hanhan12","username":"hanhan12","email":"1607077440@qq.com","commits":1,"url":"https://github.com/hanhan12"},{"name":"consen3464","username":"consen3464","email":"wangkai@consen.net","commits":1,"url":"https://github.com/consen3464"}]},"readingTime":{"minutes":1.94,"words":582},"filePathRelative":"dbs/redis/3.事务.md","autoDesc":true}');export{r as comp,c as data};
