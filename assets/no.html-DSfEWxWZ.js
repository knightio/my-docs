import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,b as t,o as e}from"./app-DGSXj59V.js";const o={};function p(c,n){return e(),s("div",null,n[0]||(n[0]=[t(`<h1 id="乱锅炖" tabindex="-1"><a class="header-anchor" href="#乱锅炖"><span>乱锅炖</span></a></h1><p>未分类</p><h2 id="注入" tabindex="-1"><a class="header-anchor" href="#注入"><span>注入</span></a></h2><h3 id="bean名称" tabindex="-1"><a class="header-anchor" href="#bean名称"><span>bean名称</span></a></h3><p>默认首字母小写的驼峰命名法</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Bean</span>
<span class="token keyword">public</span> <span class="token class-name">SqlSessionFactory</span> <span class="token function">sqlSessionFactory</span><span class="token punctuation">(</span><span class="token class-name">DataSource</span> dataSource<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span>
<span class="token punctuation">{</span>
    <span class="token class-name">String</span> typeAliasesPackage <span class="token operator">=</span> env<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">&quot;mybatis.typeAliasesPackage&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> mapperLocations <span class="token operator">=</span> env<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">&quot;mybatis.mapperLocations&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> configLocation <span class="token operator">=</span> env<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">&quot;mybatis.configLocation&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    typeAliasesPackage <span class="token operator">=</span> <span class="token function">setTypeAliasesPackage</span><span class="token punctuation">(</span>typeAliasesPackage<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token constant">VFS</span><span class="token punctuation">.</span><span class="token function">addImplClass</span><span class="token punctuation">(</span><span class="token class-name">SpringBootVFS</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">final</span> <span class="token class-name">SqlSessionFactoryBean</span> sessionFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    sessionFactory<span class="token punctuation">.</span><span class="token function">setDataSource</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">)</span><span class="token punctuation">;</span>
    sessionFactory<span class="token punctuation">.</span><span class="token function">setTypeAliasesPackage</span><span class="token punctuation">(</span>typeAliasesPackage<span class="token punctuation">)</span><span class="token punctuation">;</span>
    sessionFactory<span class="token punctuation">.</span><span class="token function">setMapperLocations</span><span class="token punctuation">(</span><span class="token function">resolveMapperLocations</span><span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span>mapperLocations<span class="token punctuation">,</span> <span class="token string">&quot;,&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    sessionFactory<span class="token punctuation">.</span><span class="token function">setConfigLocation</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DefaultResourceLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span>configLocation<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> sessionFactory<span class="token punctuation">.</span><span class="token function">getObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@Bean</span>
<span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span><span class="token string">&quot;spring.datasource.druid&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">DataSource</span> <span class="token class-name">MasterDataSource</span><span class="token punctuation">(</span><span class="token class-name">DruidProperties</span> druidProperties<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">DruidDataSource</span> dataSource <span class="token operator">=</span> <span class="token class-name">DruidDataSourceBuilder</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> druidProperties<span class="token punctuation">.</span><span class="token function">dataSource</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="bean-和-component的区别" tabindex="-1"><a class="header-anchor" href="#bean-和-component的区别"><span>@Bean 和 @Component的区别</span></a></h3><ol><li>作用对象不同：<code>@Component</code> 注解作用于类，而 <code>@Bean</code> 注解作用于方法</li><li><code>@Component</code> 通常是通过路径扫描来自动侦测以及自动装配到 Spring 容器中(我们可以使用 <code>@ComponentScan</code> 注解定义要扫描的路径从中找出标识了需要装配的类自动装配到 Spring 的 bean 容器中)。<br><code>@Bean</code> 注解通常是我们在标有该注解的方法中定义产生这个 bean，<code>@Bean</code> 告诉了 Spring 这是某个类的实例，当我们需要用它的时候还给我。</li><li><code>@Bean</code> 注解比 <code>@Component</code> 注解的自定义性更强，而且很多地方我们只能通过 <code>@Bean</code> 注解来注册 bean。比如当我们引用第三方库中的类需要装配到 Spring 容器时，只能通过 <code>@Bean</code> 来实现。</li></ol><h3 id="configuration-配置类注解" tabindex="-1"><a class="header-anchor" href="#configuration-配置类注解"><span>@Configuration ：配置类注解</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">TYPE</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Documented</span>
<span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">Configuration</span> <span class="token punctuation">{</span>

	<span class="token annotation punctuation">@AliasFor</span><span class="token punctuation">(</span>annotation <span class="token operator">=</span> <span class="token class-name">Component</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
	<span class="token class-name">String</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>

	<span class="token keyword">boolean</span> <span class="token function">proxyBeanMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token boolean">true</span><span class="token punctuation">;</span>

	<span class="token keyword">boolean</span> <span class="token function">enforceUniqueMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>约束：</p><ul><li>配置类必须以类的方式提供(比如不能是由工厂方法返回的实例)。</li><li>配置类必须是非 final 的。</li><li>配置类必须是非本地的(即可能不在方法中声明)，native 标注的方法。</li><li>任何嵌套的配置类必须声明为 static。</li><li>@Bean 方法可能不会反过来创建更多的配置类。</li></ul><h3 id="autowired-与-resource的区别" tabindex="-1"><a class="header-anchor" href="#autowired-与-resource的区别"><span>@Autowired 与 @Resource的区别</span></a></h3><ul><li>@Autowired默认按 byType 自动注入</li><li>@Resource默认按 byName 自动注入</li></ul><p>@Resource装配顺序</p><ol><li>如果同时指定了name和type，则从Spring上下文中找到唯一匹配的bean进行装配，找不到则抛出异常</li><li>如果指定了name，则从上下文中查找名称（id）匹配的bean进行装配，找不到则抛出异常</li><li>如果指定了type，则从上下文中找到类型匹配的唯一bean进行装配，找不到或者找到多个，都会抛出异常</li><li>如果既没有指定name，又没有指定type，则自动按照byName方式进行装配；如果没有匹配，则回退为一个原始类型进行匹配，如果匹配则自动装配；</li></ol><p>@Autowired 配合 @Qualifier 注解 实现 byName ???</p><h4 id="qualifier" tabindex="-1"><a class="header-anchor" href="#qualifier"><span>@Qualifier</span></a></h4><p>当存在类型相同的bean时，通过名称注入</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Autowired</span>
<span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">&quot;demo&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">Demo</span> demo1<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>定义bean名称</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">&quot;demo2&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span><span class="token punctuation">{</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="primary" tabindex="-1"><a class="header-anchor" href="#primary"><span>@Primary</span></a></h4><p>同类型bean注入优先权</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Bean</span>
<span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">user1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">&quot;user1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@Bean</span>
<span class="token annotation punctuation">@Primary</span>
<span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">user2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">&quot;user2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>不能使用多个<code>@Primary()</code>注解标记同一个类型的bean</p></blockquote><h4 id="order-priority" tabindex="-1"><a class="header-anchor" href="#order-priority"><span>@Order() @Priority()</span></a></h4><ul><li><code>@Order()</code>注解中的值越小、而bean在属性注入到同一类型的集合中就排在越前面</li><li><code>@Priority()</code>中的值越小注入单一属性的时候就会优先使用、而注入到对象集合的时候会排在前面。</li></ul><blockquote><p>属性同一对象注入到集合中的优先级使用 @Order 》 @Priority 》无</p></blockquote><ul><li>使用<code>@Autowired</code>注入单一属性值的时候、<code>@Priority()</code>和<code>@Primary()</code>会优先选择被标记的对象、优先级 <code>@Primary()</code>&gt;<code>@Priority()</code></li><li>使用<code>@Autowired</code>注入同一类型的集合属性值的时候、<code>@Primary()</code>不会对集合中的对象值顺序发生变化、而<code>@Order()</code>和<code>@Priority()</code>会改变集合中的值顺序优先级 <code>@Order</code> &gt; <code>@Priority</code></li></ul><h4 id="注入失效-不该在这" tabindex="-1"><a class="header-anchor" href="#注入失效-不该在这"><span>注入失效 （不该在这）</span></a></h4><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyConfig1</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Logger</span> log <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">MyConfig1</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setApplicationContext</span><span class="token punctuation">(</span><span class="token class-name">ApplicationContext</span> applicationContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;注入 ApplicationContext&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@PostConstruct</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;初始化&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token class-name">GenericApplicationContext</span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GenericApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
context<span class="token punctuation">.</span><span class="token function">registerBean</span><span class="token punctuation">(</span><span class="token string">&quot;myConfig1&quot;</span><span class="token punctuation">,</span> <span class="token class-name">MyConfig1</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
context<span class="token punctuation">.</span><span class="token function">registerBean</span><span class="token punctuation">(</span><span class="token class-name">AutowiredAnnotationBeanPostProcessor</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
context<span class="token punctuation">.</span><span class="token function">registerBean</span><span class="token punctuation">(</span><span class="token class-name">CommonAnnotationBeanPostProcessor</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
context<span class="token punctuation">.</span><span class="token function">registerBean</span><span class="token punctuation">(</span><span class="token class-name">ConfigurationClassPostProcessor</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
context<span class="token punctuation">.</span><span class="token function">refresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1. beanFactory 后处理器,  2. 添加 bean 后处理器, 3. 初始化单例</span>
context<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>DEBUG<span class="token punctuation">]</span> <span class="token number">10</span>:34:20.991 <span class="token punctuation">[</span>main<span class="token punctuation">]</span> com.itheima.a06.MyConfig1           - 注入 ApplicationContext 
<span class="token punctuation">[</span>DEBUG<span class="token punctuation">]</span> <span class="token number">10</span>:34:20.995 <span class="token punctuation">[</span>main<span class="token punctuation">]</span> com.itheima.a06.MyConfig1           - 初始化 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>添加beanFactory 后处理器</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyConfig1</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Logger</span> log <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">MyConfig1</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setApplicationContext</span><span class="token punctuation">(</span><span class="token class-name">ApplicationContext</span> applicationContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;注入 ApplicationContext&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@PostConstruct</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;初始化&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Bean</span> <span class="token comment">//  beanFactory 后处理器</span>
    <span class="token keyword">public</span> <span class="token class-name">BeanFactoryPostProcessor</span> <span class="token function">processor1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> beanFactory <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;执行 processor1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>INFO <span class="token punctuation">]</span> <span class="token number">10</span>:35:55.619 <span class="token punctuation">[</span>main<span class="token punctuation">]</span> o.s.c.a.ConfigurationClassEnhancer  - @Bean method MyConfig1.processor1 is non-static and returns an object assignable to Spring<span class="token string">&#39;s BeanFactoryPostProcessor interface. This will result in a failure to process annotations such as @Autowired, @Resource and @PostConstruct within the method&#39;</span>s declaring @Configuration class. Add the <span class="token string">&#39;static&#39;</span> modifier to this method to avoid these container lifecycle issues<span class="token punctuation">;</span> see @Bean javadoc <span class="token keyword">for</span> complete details. 
<span class="token punctuation">[</span>DEBUG<span class="token punctuation">]</span> <span class="token number">10</span>:35:55.629 <span class="token punctuation">[</span>main<span class="token punctuation">]</span> com.itheima.a06.MyConfig1           - 执行 processor1 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>@Autowired 和 @PostConstruct 的注入和初始化失败</p></blockquote><p>Java 配置类不包含 BeanFactoryPostProcessor 的情况</p><div class="language-mermaid line-numbers-mode" data-ext="mermaid" data-title="mermaid"><pre class="language-mermaid"><code><span class="token keyword">sequenceDiagram</span> 
<span class="token keyword">participant</span> ac as ApplicationContext
<span class="token keyword">participant</span> bfpp as BeanFactoryPostProcessor
<span class="token keyword">participant</span> bpp as BeanPostProcessor
<span class="token keyword">participant</span> config as Java配置类
ac <span class="token arrow operator">-&gt;&gt;</span> bfpp <span class="token operator">:</span> 1. 执行 BeanFactoryPostProcessor
ac <span class="token arrow operator">-&gt;&gt;</span> bpp <span class="token operator">:</span> 2. 注册 BeanPostProcessor
ac <span class="token arrow operator">-&gt;&gt;</span> +config <span class="token operator">:</span> 3. 创建和初始化
bpp <span class="token arrow operator">-&gt;&gt;</span> config <span class="token operator">:</span> 3.1 依赖注入扩展<span class="token text string">(如 @Value 和 @Autowired)</span>
bpp <span class="token arrow operator">-&gt;&gt;</span> config <span class="token operator">:</span> 3.2 初始化扩展<span class="token text string">(如 @PostConstruct)</span>
ac <span class="token arrow operator">-&gt;&gt;</span> config <span class="token operator">:</span> 3.3 执行 Aware 及 InitializingBean
config <span class="token arrow operator">--&gt;&gt;</span> -ac <span class="token operator">:</span> 3.4 创建成功
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Java 配置类包含 BeanFactoryPostProcessor 的情况，因此要创建其中的BeanFactoryPostProcessor 必须提前创建 Java 配置类，而此时的 BeanPostProcessor 还未备好，导致 @Autowired 等注解失效</p><div class="language-mermaid line-numbers-mode" data-ext="mermaid" data-title="mermaid"><pre class="language-mermaid"><code><span class="token keyword">sequenceDiagram</span> 
<span class="token keyword">participant</span> ac as ApplicationContext
<span class="token keyword">participant</span> bfpp as BeanFactoryPostProcessor
<span class="token keyword">participant</span> bpp as BeanPostProcessor
<span class="token keyword">participant</span> config as Java配置类
ac <span class="token arrow operator">-&gt;&gt;</span> +config <span class="token operator">:</span> 3. 创建和初始化
ac <span class="token arrow operator">-&gt;&gt;</span> config <span class="token operator">:</span> 3.1 执行 Aware 及 InitializingBean
config <span class="token arrow operator">--&gt;&gt;</span> -ac <span class="token operator">:</span> 3.2 创建成功

ac <span class="token arrow operator">-&gt;&gt;</span> bfpp <span class="token operator">:</span> 1. 执行 BeanFactoryPostProcessor
ac <span class="token arrow operator">-&gt;&gt;</span> bpp <span class="token operator">:</span> 2. 注册 BeanPostProcessor
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,41)]))}const u=a(o,[["render",p],["__file","no.html.vue"]]),r=JSON.parse('{"path":"/java/basis/no.html","title":"乱锅炖","lang":"zh-CN","frontmatter":{"description":"乱锅炖 未分类 注入 bean名称 默认首字母小写的驼峰命名法 @Bean 和 @Component的区别 作用对象不同：@Component 注解作用于类，而 @Bean 注解作用于方法 @Component 通常是通过路径扫描来自动侦测以及自动装配到 Spring 容器中(我们可以使用 @ComponentScan 注解定义要扫描的路径从中找出标识...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/my-docs/java/basis/no.html"}],["meta",{"property":"og:site_name","content":"一切为了更好的自己"}],["meta",{"property":"og:title","content":"乱锅炖"}],["meta",{"property":"og:description","content":"乱锅炖 未分类 注入 bean名称 默认首字母小写的驼峰命名法 @Bean 和 @Component的区别 作用对象不同：@Component 注解作用于类，而 @Bean 注解作用于方法 @Component 通常是通过路径扫描来自动侦测以及自动装配到 Spring 容器中(我们可以使用 @ComponentScan 注解定义要扫描的路径从中找出标识..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-09-22T10:08:41.000Z"}],["meta",{"property":"article:author","content":"憨憨十二"}],["meta",{"property":"article:modified_time","content":"2023-09-22T10:08:41.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"乱锅炖\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-09-22T10:08:41.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"憨憨十二\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"注入","slug":"注入","link":"#注入","children":[{"level":3,"title":"bean名称","slug":"bean名称","link":"#bean名称","children":[]},{"level":3,"title":"@Bean 和 @Component的区别","slug":"bean-和-component的区别","link":"#bean-和-component的区别","children":[]},{"level":3,"title":"@Configuration ：配置类注解","slug":"configuration-配置类注解","link":"#configuration-配置类注解","children":[]},{"level":3,"title":"@Autowired 与 @Resource的区别","slug":"autowired-与-resource的区别","link":"#autowired-与-resource的区别","children":[{"level":4,"title":"@Qualifier","slug":"qualifier","link":"#qualifier","children":[]},{"level":4,"title":"@Primary","slug":"primary","link":"#primary","children":[]},{"level":4,"title":"@Order() @Priority()","slug":"order-priority","link":"#order-priority","children":[]},{"level":4,"title":"注入失效 （不该在这）","slug":"注入失效-不该在这","link":"#注入失效-不该在这","children":[]}]}]}],"git":{"createdTime":1695119375000,"updatedTime":1695377321000,"contributors":[{"name":"wangkai","email":"wangkai@yqun.com.cn","commits":2},{"name":"hanhan12","email":"1607077440@qq.com","commits":1}]},"readingTime":{"minutes":4.38,"words":1315},"filePathRelative":"java/basis/no.md","localizedDate":"2023年9月19日","autoDesc":true}');export{u as comp,r as data};
