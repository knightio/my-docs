import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,b as t,o as e}from"./app-B9MCLd9g.js";const c={};function p(l,n){return e(),s("div",null,n[0]||(n[0]=[t(`<h1 id="暂且不知道叫什么" tabindex="-1"><a class="header-anchor" href="#暂且不知道叫什么"><span>暂且不知道叫什么</span></a></h1><h2 id="基本类型" tabindex="-1"><a class="header-anchor" href="#基本类型"><span>基本类型</span></a></h2><table><thead><tr><th>基本类型</th><th>字节</th><th>默认值</th><th>包装类</th></tr></thead><tbody><tr><td>byte</td><td>1</td><td>0</td><td>Byte</td></tr><tr><td>short</td><td>2</td><td>2</td><td>Short</td></tr><tr><td>char</td><td>2</td><td>&#39;u0000&#39;</td><td>Character</td></tr><tr><td>int</td><td>4</td><td>0</td><td>Integer</td></tr><tr><td>float</td><td>4</td><td>0f</td><td>Float</td></tr><tr><td>long</td><td>8</td><td>0L</td><td>Long</td></tr><tr><td>double</td><td>8</td><td>0d</td><td>Double</td></tr><tr><td>boolean</td><td></td><td>false</td><td>Boolean</td></tr></tbody></table><p><code>boolean</code> 官方文档未明确定义，依赖于JVMs实现。</p><h3 id="包装类" tabindex="-1"><a class="header-anchor" href="#包装类"><span>包装类</span></a></h3><p>基本类型有默认值，包装类默认为null</p><p>基本数据类型的局部变量存放在 Java 虚拟机栈中的局部变量表中，基本数据类型的成员变量（未被 static 修饰 ）存放在 Java 虚拟机的堆中。包装类型属于对象类型，我们知道<strong>几乎所有对象实例</strong>都存在于堆中。</p><blockquote><p><strong>为什么说是几乎所有对象实例呢？</strong></p><p>HotSpot 虚拟机引入了 JIT 优化之后，会对对象进行逃逸分析，如果发现某一个对象并没有逃逸到方法外部，那么就可能通过标量替换来实现<strong>栈上分配</strong>，而避免堆上分配内存。</p></blockquote><h4 id="常量池" tabindex="-1"><a class="header-anchor" href="#常量池"><span>常量池</span></a></h4><table><thead><tr><th>类型</th><th>范围</th></tr></thead><tbody><tr><td>Byte,Short,Integer,Long</td><td>[-128,127]</td></tr><tr><td>Character</td><td>[0,127]</td></tr><tr><td>Boolean</td><td>True,False</td></tr></tbody></table><h2 id="异常" tabindex="-1"><a class="header-anchor" href="#异常"><span>异常</span></a></h2><h3 id="exception-和-error" tabindex="-1"><a class="header-anchor" href="#exception-和-error"><span>Exception 和 Error</span></a></h3><ul><li>Exception :程序本身可以处理的异常，可以通过 catch 来进行捕获。 <ul><li>Checked Exception (受检查异常，必须处理)</li><li>Unchecked Exception (不受检查异常，可以不处理)。</li></ul></li><li>Error：Error 属于程序无法处理的错误 ，不建议通过catch捕获 。例如 Java 虚拟机运行错误（Virtual MachineError）、虚拟机内存不够错误(OutOfMemoryError)、类定义错误（NoClassDefFoundError）等 。这些异常发生时，Java 虚拟机（JVM）一般会选择线程终止。</li></ul><h3 id="checked-exception-和-unchecked-exception" tabindex="-1"><a class="header-anchor" href="#checked-exception-和-unchecked-exception"><span>Checked Exception 和 Unchecked Exception</span></a></h3><p>Checked Exception 即 受检查异常 ，Java 代码在编译过程中，如果受检查异常没有被 catch或者throws 关键字处理的话，就没办法通过编译。</p><p>除了RuntimeException及其子类以外，其他的Exception类及其子类都属于受检查异常。</p><p>RuntimeException 及其子类都统称为非受检查异常</p><h3 id="try-catch-finally" tabindex="-1"><a class="header-anchor" href="#try-catch-finally"><span>try-catch-finally</span></a></h3><p><code>try</code>块：用于捕获异常。其后可接零个或多个 <code>catch</code> 块，如果没有 <code>catch</code> 块，则必须跟一个 <code>finally</code> 块。</p><p><code>catch</code>块：用于处理 <code>try</code> 捕获到的异常。</p><p><code>finally</code> 块：无论是否捕获或处理异常，<code>finally</code> 块里的语句都会被执行。当在 <code>try</code> 块或 <code>catch</code> 块中遇到 <code>return</code> 语句时，finally 语句块将在方法返回之前被执行。</p><blockquote><p>If the try clause executes a return, the compiled code does the following:</p><ol><li>Saves the return value (if any) in a local variable.</li><li>Executes a jsr to the code for the finally clause.</li><li>Upon return from the finally clause, returns the value saved in the local variable.</li></ol></blockquote><h4 id="finally-不一定会执行" tabindex="-1"><a class="header-anchor" href="#finally-不一定会执行"><span>finally 不一定会执行</span></a></h4><ol><li>虚拟机被终止运行</li><li>程序所在的线程死亡</li><li>关闭 CPU</li></ol><h3 id="try-with-resources" tabindex="-1"><a class="header-anchor" href="#try-with-resources"><span>try-with-resources</span></a></h3><p>面对必须要关闭的资源，我们总是应该优先使用 try-with-resources 而不是try-finally。随之产生的代码更简短，更清晰，产生的异常对我们也更有用。try-with-resources语句让我们更容易编写必须要关闭的资源的代码，若采用try-finally则几乎做不到这点。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">try</span><span class="token punctuation">(</span>
    <span class="token class-name">Scanner</span> scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;test.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">{</span>

<span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">FileNotFoundException</span> fnfe<span class="token punctuation">)</span><span class="token punctuation">{</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="泛型" tabindex="-1"><a class="header-anchor" href="#泛型"><span>泛型</span></a></h2><h3 id="分类" tabindex="-1"><a class="header-anchor" href="#分类"><span>分类</span></a></h3><h4 id="泛型类" tabindex="-1"><a class="header-anchor" href="#泛型类"><span>泛型类</span></a></h4><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Forth</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">,</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>
        <span class="token class-name">E</span> e<span class="token punctuation">;</span>
        <span class="token class-name">T</span> t<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="泛型方法" tabindex="-1"><a class="header-anchor" href="#泛型方法"><span>泛型方法</span></a></h4><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">T</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token class-name">T</span> t<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="泛型类与方法" tabindex="-1"><a class="header-anchor" href="#泛型类与方法"><span>泛型类与方法</span></a></h4><p>泛型类中的类型参数与泛型方法中的类型参数是没有相应的联系的，泛型方法始终以自己定义的类型参数为准</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">First</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>
    <span class="token class-name">T</span> t<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name">First</span><span class="token punctuation">(</span><span class="token class-name">T</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>t <span class="token operator">=</span> t<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">T</span> <span class="token function">firstMethod</span><span class="token punctuation">(</span><span class="token class-name">T</span> t<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">T</span> <span class="token function">getT</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> t<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token class-name">First</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> first <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">First</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token string">&quot;123&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>first<span class="token punctuation">.</span><span class="token function">getT</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//java.lang.String</span>
first<span class="token punctuation">.</span><span class="token function">firstMethod</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//class java.lang.Integer</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="泛型接口" tabindex="-1"><a class="header-anchor" href="#泛型接口"><span>泛型接口</span></a></h4><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Iterable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,38)]))}const r=a(c,[["render",p],["__file","basis.html.vue"]]),d=JSON.parse('{"path":"/java/basis/basis.html","title":"暂且不知道叫什么","lang":"zh-CN","frontmatter":{"description":"暂且不知道叫什么 基本类型 boolean 官方文档未明确定义，依赖于JVMs实现。 包装类 基本类型有默认值，包装类默认为null 基本数据类型的局部变量存放在 Java 虚拟机栈中的局部变量表中，基本数据类型的成员变量（未被 static 修饰 ）存放在 Java 虚拟机的堆中。包装类型属于对象类型，我们知道几乎所有对象实例都存在于堆中。 为什么说...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/my-docs/java/basis/basis.html"}],["meta",{"property":"og:site_name","content":"一切为了更好的自己"}],["meta",{"property":"og:title","content":"暂且不知道叫什么"}],["meta",{"property":"og:description","content":"暂且不知道叫什么 基本类型 boolean 官方文档未明确定义，依赖于JVMs实现。 包装类 基本类型有默认值，包装类默认为null 基本数据类型的局部变量存放在 Java 虚拟机栈中的局部变量表中，基本数据类型的成员变量（未被 static 修饰 ）存放在 Java 虚拟机的堆中。包装类型属于对象类型，我们知道几乎所有对象实例都存在于堆中。 为什么说..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-09-18T14:39:52.000Z"}],["meta",{"property":"article:author","content":"憨憨十二"}],["meta",{"property":"article:modified_time","content":"2023-09-18T14:39:52.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"暂且不知道叫什么\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-09-18T14:39:52.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"憨憨十二\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"基本类型","slug":"基本类型","link":"#基本类型","children":[{"level":3,"title":"包装类","slug":"包装类","link":"#包装类","children":[{"level":4,"title":"常量池","slug":"常量池","link":"#常量池","children":[]}]}]},{"level":2,"title":"异常","slug":"异常","link":"#异常","children":[{"level":3,"title":"Exception 和 Error","slug":"exception-和-error","link":"#exception-和-error","children":[]},{"level":3,"title":"Checked Exception 和 Unchecked Exception","slug":"checked-exception-和-unchecked-exception","link":"#checked-exception-和-unchecked-exception","children":[]},{"level":3,"title":"try-catch-finally","slug":"try-catch-finally","link":"#try-catch-finally","children":[{"level":4,"title":"finally 不一定会执行","slug":"finally-不一定会执行","link":"#finally-不一定会执行","children":[]}]},{"level":3,"title":"try-with-resources","slug":"try-with-resources","link":"#try-with-resources","children":[]}]},{"level":2,"title":"泛型","slug":"泛型","link":"#泛型","children":[{"level":3,"title":"分类","slug":"分类","link":"#分类","children":[{"level":4,"title":"泛型类","slug":"泛型类","link":"#泛型类","children":[]},{"level":4,"title":"泛型方法","slug":"泛型方法","link":"#泛型方法","children":[]},{"level":4,"title":"泛型类与方法","slug":"泛型类与方法","link":"#泛型类与方法","children":[]},{"level":4,"title":"泛型接口","slug":"泛型接口","link":"#泛型接口","children":[]}]}]}],"git":{"createdTime":1692872035000,"updatedTime":1695047992000,"contributors":[{"name":"hanhan12","email":"1607077440@qq.com","commits":1},{"name":"wangkai","email":"wangkai@yqun.com.cn","commits":1}]},"readingTime":{"minutes":3.04,"words":913},"filePathRelative":"java/basis/basis.md","localizedDate":"2023年8月24日","autoDesc":true}');export{r as comp,d as data};
