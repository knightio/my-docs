import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,e as a,o}from"./app-BQPzs645.js";const i={};function n(s,d){return o(),e("div",null,d[0]||(d[0]=[a(`<h1 id="_6-类文件结构-下" tabindex="-1"><a class="header-anchor" href="#_6-类文件结构-下"><span>6.类文件结构（下）</span></a></h1><h2 id="字节码指令简介" tabindex="-1"><a class="header-anchor" href="#字节码指令简介"><span>字节码指令简介</span></a></h2><p>Java虚拟机的指令由<strong>一个字节长度</strong>的、代表着某种特定操作含义的数字（称为操作码，Opcode）以及跟随其后的零至多个代表此操作所需的参数（称为操作数，Operand）构成。</p><h3 id="字节码与数据类型" tabindex="-1"><a class="header-anchor" href="#字节码与数据类型"><span>字节码与数据类型</span></a></h3><p>部分特殊的字符来表明专门为哪种数据类型服务：i代表对int类型的数据操作，l代表long，s代表short，b代表byte，c代表char，f代表float，d代表double，a代表reference。</p><p>Java虚拟机指令集所支持的数据类型：</p><table><thead><tr><th>opcode</th><th>byte</th><th>short</th><th>int</th><th>long</th><th>float</th><th>double</th><th>char</th><th>reference</th></tr></thead><tbody><tr><td>Tipush</td><td>bipush</td><td>sipush</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>Tconst</td><td></td><td></td><td>iconst</td><td>lconst</td><td>fconst</td><td>dconst</td><td></td><td>aconst</td></tr><tr><td>Tload</td><td></td><td></td><td>iload</td><td>lload</td><td>fload</td><td>dload</td><td></td><td>aload</td></tr><tr><td>Tstore</td><td></td><td></td><td>istore</td><td>lstore</td><td>fstore</td><td>dstore</td><td></td><td>astore</td></tr><tr><td>Tinc</td><td></td><td></td><td>iinc</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>Taload</td><td>baload</td><td>saload</td><td>iaload</td><td>laload</td><td>faload</td><td>daload</td><td>caload</td><td>aaload</td></tr><tr><td>Tastore</td><td>bastore</td><td>sastore</td><td>iastore</td><td>lastore</td><td>fastore</td><td>dastore</td><td>castore</td><td>aastore</td></tr><tr><td>Tadd</td><td></td><td></td><td>iadd</td><td>ladd</td><td>fadd</td><td>dadd</td><td></td><td></td></tr><tr><td>Tsub</td><td></td><td></td><td>isub</td><td>lsub</td><td>fsub</td><td>dsub</td><td></td><td></td></tr><tr><td>Tmul</td><td></td><td></td><td>imul</td><td>lmul</td><td>fmul</td><td>dmul</td><td></td><td></td></tr><tr><td>Tdiv</td><td></td><td></td><td>idiv</td><td>ldiv</td><td>fdiv</td><td>ddiv</td><td></td><td></td></tr><tr><td>Trem</td><td></td><td></td><td>irem</td><td>lrem</td><td>frem</td><td>drem</td><td></td><td></td></tr><tr><td>Tneg</td><td></td><td></td><td>ineg</td><td>lneg</td><td>fneg</td><td>dneg</td><td></td><td></td></tr><tr><td>Tshl</td><td></td><td></td><td>ishl</td><td>lshl</td><td></td><td></td><td></td><td></td></tr><tr><td>Tshr</td><td></td><td></td><td>ishr</td><td>lshr</td><td></td><td></td><td></td><td></td></tr><tr><td>Tushr</td><td></td><td></td><td>iushr</td><td>lushr</td><td></td><td></td><td></td><td></td></tr><tr><td>Tand</td><td></td><td></td><td>iand</td><td>land</td><td></td><td></td><td></td><td></td></tr><tr><td>Tor</td><td></td><td></td><td>ior</td><td>lor</td><td></td><td></td><td></td><td></td></tr><tr><td>Txor</td><td></td><td></td><td>ixor</td><td>lxor</td><td></td><td></td><td></td><td></td></tr><tr><td>i2T</td><td>i2b</td><td>i2s</td><td></td><td>i21</td><td>i2f</td><td>i2d</td><td></td><td></td></tr><tr><td>l2T</td><td></td><td></td><td>l2i</td><td></td><td>l2f</td><td>l2d</td><td></td><td></td></tr><tr><td>f2T</td><td></td><td></td><td>f2i</td><td>f21</td><td></td><td>f2d</td><td></td><td></td></tr><tr><td>d2T</td><td></td><td></td><td>d2i</td><td>d2l</td><td>d2f</td><td></td><td></td><td></td></tr><tr><td>Tcmp</td><td></td><td></td><td></td><td>lcmp</td><td></td><td></td><td></td><td></td></tr><tr><td>Tcmpl</td><td></td><td></td><td></td><td></td><td>fcmpl</td><td>dcmpl</td><td></td><td></td></tr><tr><td>Tcmpg</td><td></td><td></td><td></td><td></td><td>fcmpg</td><td>dcmpg</td><td></td><td></td></tr><tr><td>if_TcmpOP</td><td></td><td></td><td>if_icmpOP</td><td></td><td></td><td></td><td></td><td>if_acmpOP</td></tr><tr><td>Treturn</td><td></td><td></td><td>ireturn</td><td>lreturn</td><td>freturn</td><td>dreturn</td><td></td><td>areturn</td></tr></tbody></table><p>编译器会在编译期或运行期将byte和short类型的数据带符号扩展（Sign-Extend）为相应的int类型数据，将boolean和char类型数据零位扩展（Zero-Extend）为相应的int类型数据。</p><h3 id="加载和存储指令" tabindex="-1"><a class="header-anchor" href="#加载和存储指令"><span>加载和存储指令</span></a></h3><p>加载和存储指令用于将数据在栈帧中的局部变量表和操作数栈之间来回传输</p><ul><li>将一个局部变量加载到操作栈：<code>Tload</code>、<code>Tload_&lt;n&gt;</code></li><li>将一个数值从操作数栈存储到局部变量表：<code>Tstore</code>、<code>Tstore_&lt;n&gt;</code></li><li>将一个常量加载到操作数栈：<code>Tipush</code>、<code>ldc</code>、<code>ldc_w</code>、<code>ldc2_w</code>、<code>aconst_null</code>、<code>iconst_m1</code>、<code>iconst_&lt;i&gt;</code>、<code>lconst_&lt;l&gt;</code>、<code>fconst_&lt;f&gt;</code>、<code>dconst_&lt;d&gt;</code></li><li>扩充局部变量表的访问索引的指令：wide</li></ul><blockquote><p><code>&lt;&gt;</code>中为操作数</p></blockquote><p>存储数据的操作数栈和局部变量表主要由加载和存储指令进行操作，除此之外，还有少量指令，如访问对象的字段或数组元素的指令也会向操作数栈传输数据。</p><h3 id="运算指令" tabindex="-1"><a class="header-anchor" href="#运算指令"><span>运算指令</span></a></h3><p>算术指令用于对两个操作数栈上的值进行某种特定运算，并把结果重新存入到操作栈顶。</p><p>无论是哪种算术指令，均是使用Java虚拟机的<strong>算术类型</strong>来进行计算的。</p><ul><li>加法指令：<code>Tadd</code></li><li>减法指令：<code>Tsub</code></li><li>乘法指令：<code>Tmul</code></li><li>除法指令：<code>Tdiv</code></li><li>求余指令：<code>Trem</code></li><li>取反指令：<code>Tneg</code></li><li>位移指令：<code>Tshl</code>、<code>Tshr</code>、<code>Tushr</code></li><li>按位或指令：<code>Tor</code></li><li>按位与指令：<code>Tand</code></li><li>按位异或指令：<code>Txor</code></li><li>局部变量自增指令：<code>Tinc</code></li><li>比较指令：<code>Tcmpg</code>、<code>Tcmpl</code>、<code>Tcmp</code></li></ul><p>只有除法指令（<code>Tdiv</code>）以及求余指令（<code>Trem</code>）中当出现除数为零时会导致虚拟机抛出<code>ArithmeticException</code>异常，其余任何整型数运算场景都不应该抛出运行时异常。</p><blockquote><p><strong>IEEE 754规范</strong></p></blockquote><h3 id="类型转换指令" tabindex="-1"><a class="header-anchor" href="#类型转换指令"><span>类型转换指令</span></a></h3><p>Java虚拟机直接支持（即转换时无须显式的转换指令）以下数值类型的宽化类型转换（Widening Numeric Conversion，即小范围类型向大范围类型的安全转换）与之相对的，处理窄化类型转换（Narrowing Numeric Conversion）时，就必须显式地使用转换指令来完成，这些转换指令包括<code>i2b</code>、<code>i2c</code>、<code>i2s</code>、<code>l2i</code>、<code>f2i</code>、<code>f2l</code>、<code>d2i</code>、<code>d2l</code>和<code>d2f</code>。窄化类型转换可能会导致转换结果<strong>产生不同的正负号、不同的数量级的情况，转换过程很可能会导致数值的精度丢失</strong>。</p><p>Java虚拟机将一个浮点值窄化转换为整数类型T（T限于int或long类型之一）的时候，必须遵循以下转换规则：</p><ul><li>如果浮点值是NaN，那转换结果就是int或long类型的0。</li><li>如果浮点值不是无穷大的话，浮点值使用IEEE 754的向零舍入模式取整，获得整数值v。如果v在目标类型T（int或long）的表示范围之类，那转换结果就是v；否则，将根据v的符号，转换为T所能表示的最大或者最小正数。</li></ul><p>从double类型到float类型做窄化转换的过程与IEEE 754中定义的一致，通过IEEE 754向最接近数舍入模式舍入得到一个可以使用float类型表示的数字。如果转换结果的绝对值太小、无法使用float来表示的话，将返回float类型的正负零；如果转换结果的绝对值太大、无法使用float来表示的话，将返回float类型的正负无穷大。对于double类型的NaN值将按规定转换为float类型的NaN值。</p><p>数值类型的窄化转换指令永远不可能导致虚拟机抛出运行时异常。</p><h3 id="对象创建与访问指令" tabindex="-1"><a class="header-anchor" href="#对象创建与访问指令"><span>对象创建与访问指令</span></a></h3><ul><li>创建类实例的指令：<code>new</code></li><li>创建数组的指令：<code>newarray</code>、<code>anewarray</code>、<code>multianewarray</code></li><li>访问类字段（static字段，或者称为类变量）和实例字段（非static字段，或者称为实例变量）的指令：<code>getfield</code>、<code>putfield</code>、<code>getstatic</code>、<code>putstatic</code></li><li>把一个数组元素加载到操作数栈的指令：<code>baload</code>、<code>caload</code>、<code>saload</code>、<code>iaload</code>、<code>laload</code>、<code>faload</code>、<code>daload</code>、<code>aaload</code></li><li>将一个操作数栈的值储存到数组元素中的指令：<code>bastore</code>、<code>castore</code>、<code>sastore</code>、<code>iastore</code>、<code>fastore</code>、<code>dastore</code>、<code>aastore</code></li><li>取数组长度的指令：<code>arraylength</code></li><li>检查类实例类型的指令：<code>instanceof</code>、<code>checkcast</code></li></ul><h3 id="操作数栈管理指令" tabindex="-1"><a class="header-anchor" href="#操作数栈管理指令"><span>操作数栈管理指令</span></a></h3><p>直接操作操作数栈的指令</p><ul><li>将操作数栈的栈顶一个或两个元素出栈：<code>pop</code>、<code>pop2</code></li><li>复制栈顶一个或两个数值并将复制值或双份的复制值重新压入栈顶：<code>dup</code>、<code>dup2</code>、<code>dup_x1</code>、<code>dup2_x1</code>、<code>dup_x2</code>、<code>dup2_x2</code></li><li>将栈最顶端的两个数值互换：<code>swap</code></li></ul><h3 id="控制转移指令" tabindex="-1"><a class="header-anchor" href="#控制转移指令"><span>控制转移指令</span></a></h3><p>控制转移指令可以让Java虚拟机有条件或无条件地从指定位置指令（而不是控制转移指令）的下一条指令继续执行程序，从概念模型上理解，可以认为控制指令就是在有条件或无条件地修改PC寄存器的值。</p><ul><li>条件分支：<code>ifeq</code>、<code>iflt</code>、<code>ifle</code>、<code>ifne</code>、<code>ifgt</code>、<code>ifge</code>、<code>ifnull</code>、<code>ifnonnull</code>、<code>if_icmpeq</code>、<code>if_icmpne</code>、<code>if_icmplt</code>、<code>if_icmpgt</code>、<code>if_icmple</code>、<code>if_icmpge</code>、<code>if_acmpeq</code>和<code>if_acmpne</code></li><li>复合条件分支：<code>tableswitch</code>、<code>lookupswitch</code></li><li>无条件分支：<code>goto</code>、<code>goto_w</code>、<code>jsr</code>、<code>jsr_w</code>、<code>ret</code></li></ul><p>在Java虚拟机中有专门的指令集用来处理int和reference类型的条件分支比较操作，为了可以无须明显标识一个数据的值是否null，也有专门的指令用来检测null值。</p><p>与前面算术运算的规则一致，对于boolean类型、byte类型、char类型和short类型的条件分支比较操作，都使用int类型的比较指令来完成，而对于long类型、float类型和double类型的条件分支比较操作，则会先执行相应类型的比较运算指令（<code>dcmpg</code>、<code>dcmpl</code>、<code>fcmpg</code>、<code>fcmpl</code>、<code>lcmp</code>），运算指令会返回一个整型值到操作数栈中，随后再执行int类型的条件分支比较操作来完成整个分支跳转</p><h3 id="方法调用和返回指令" tabindex="-1"><a class="header-anchor" href="#方法调用和返回指令"><span>方法调用和返回指令</span></a></h3><ul><li><code>invokevirtual</code>指令：用于调用对象的实例方法，根据对象的实际类型进行分派（虚方法分派），这也是Java语言中最常见的方法分派方式。</li><li><code>invokeinterface</code>指令：用于调用接口方法，它会在运行时搜索一个实现了这个接口方法的对象，找出适合的方法进行调用。</li><li><code>invokespecial</code>指令：用于调用一些需要特殊处理的实例方法，包括实例初始化方法、私有方法和父类方法。</li><li><code>invokestatic</code>指令：用于调用类静态方法（static方法）。</li><li><code>invokedynamic</code>指令：用于在运行时动态解析出调用点限定符所引用的方法。并执行该方法。前面四条调用指令的分派逻辑都固化在Java虚拟机内部，用户无法改变，而invokedynamic指令的分派逻辑是由用户所设定的引导方法决定的。</li></ul><p>方法调用指令与数据类型无关，而方法返回指令是<strong>根据返回值的类型区分</strong>的，包括<code>ireturn</code>（当返回值是boolean、byte、char、short和int类型时使用）、<code>lreturn</code>、<code>freturn</code>、<code>dreturn</code>和<code>areturn</code>，另外还有一条return指令供声明为void的方法、实例初始化方法、类和接口的类初始化方法使用。</p><h3 id="异常处理指令" tabindex="-1"><a class="header-anchor" href="#异常处理指令"><span>异常处理指令</span></a></h3><p>在Java程序中显式抛出异常的操作（throw语句）都由<code>athrow</code>指令来实现。《Java虚拟机规范》还规定了许多运行时异常会在其他Java虚拟机指令检测到异常状况时自动抛出。</p><p>而在Java虚拟机中，处理异常（catch语句）不是由字节码指令来实现的，而是采用<strong>异常表</strong>来完成。</p><h3 id="同步指令" tabindex="-1"><a class="header-anchor" href="#同步指令"><span>同步指令</span></a></h3><p>Java虚拟机可以支持方法级的同步和方法内部一段指令序列的同步，这两种同步结构都是使用管程（Monitor，更常见的是直接将它称为“锁”）来实现的。</p><p>方法级的同步是隐式的，无须通过字节码指令来控制，它实现在方法调用和返回操作之中。虚拟机可以从<strong>方法常量池中的方法表</strong>结构中的<code>ACC_SYNCHRONIZED</code>访问标志得知一个方法是否被声明为同步方法。当方法调用时，调用指令将会检查方法的<code>ACC_SYNCHRONIZED</code>访问标志是否被设置，如果设置了，执行线程就要求先成功持有管程，然后才能执行方法，最后当方法完成（无论是正常完成还是非正常完成）时释放管程。在方法执行期间，执行线程持有了管程，其他任何线程都无法再获取到同一个管程。如果一个同步方法执行期间抛出了异常，并且在方法内部无法处理此异常，那这个同步方法<strong>所持有的管程将在异常抛到同步方法边界之外时自动释放</strong>。</p><p>同步一段指令集序列通常是由Java语言中的<code>synchronized</code>语句块来表示的，Java虚拟机的指令集中有<code>monitorenter</code>和<code>monitorexit</code>两条指令来支持synchronized关键字的语义，正确实现<code>synchronized</code>关键字<strong>需要Javac编译器与Java虚拟机两者共同协作支持</strong>。</p><p>eg:</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> onlyMe</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Foo</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> f) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    synchronized</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(f) {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        doSomething</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>编译</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>Method void onlyMe(Foo)</span></span>
<span class="line"><span>0 aload_1                  // 将对象f入栈</span></span>
<span class="line"><span>1 dup                      // 复制栈顶元素（即f的引用）</span></span>
<span class="line"><span>2 astore_2                 // 将栈顶元素存储到局部变量表变量槽 2中</span></span>
<span class="line"><span>3 monitorenter             // 以栈定元素（即f）作为锁，开始同步</span></span>
<span class="line"><span>4 aload_0                  // 将局部变量槽 0（即this指针）的元素入栈</span></span>
<span class="line"><span>5 invokevirtual #5         // 调用doSomething()方法</span></span>
<span class="line"><span>8 aload_2                  // 将局部变量Slow 2的元素（即f）入栈</span></span>
<span class="line"><span>9 monitorexit              // 退出同步</span></span>
<span class="line"><span>10 goto 18                 // 方法正常结束，跳转到18返回</span></span>
<span class="line"><span>13 astore_3                // 从这步开始是异常路径，见下面异常表的Taget 13</span></span>
<span class="line"><span>14 aload_2                 // 将局部变量Slow 2的元素（即f）入栈</span></span>
<span class="line"><span>15 monitorexit             // 退出同步</span></span>
<span class="line"><span>16 aload_3                 // 将局部变量Slow 3的元素（即异常对象）入栈</span></span>
<span class="line"><span>17 athrow                  // 把异常对象重新抛出给onlyMe()方法的调用者</span></span>
<span class="line"><span>18 return                  // 方法正常返回</span></span>
<span class="line"><span>Exception table:</span></span>
<span class="line"><span>FromTo Target Type</span></span>
<span class="line"><span>     4     10   13  any</span></span>
<span class="line"><span>    13     16   13  any</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>编译器必须确保无论方法通过何种方式完成，方法中调用过的每条<code>monitorenter</code>指令都必须有其对应的<code>monitorexit</code>指令，而无论这个方法是正常结束还是异常结束。</p><p>为了保证在方法异常完成时<code>monitorenter</code>和<code>monitorexit</code>指令依然可以正确配对执行，编译器会<strong>自动产生</strong>一个异常处理程序，这个异常处理程序声明可处理所有的异常，它的<strong>目的就是用来执行<code>monitorexit</code>指令</strong>。</p><h2 id="公有设计-私有实现" tabindex="-1"><a class="header-anchor" href="#公有设计-私有实现"><span>公有设计，私有实现</span></a></h2><p>理解公有设计与私有实现之间的分界线是非常有必要的，任何一款Java虚拟机实现都必须能够读取Class文件并精确实现包含在其中的Java虚拟机代码的语义。</p><h2 id="class文件结构的发展" tabindex="-1"><a class="header-anchor" href="#class文件结构的发展"><span>Class文件结构的发展</span></a></h2><p>Class文件格式所具备的平台中立（不依赖于特定硬件及操作系统）、紧凑、稳定和可扩展的特点，是Java技术体系实现平台无关、语言无关两项特性的重要支柱。</p>`,55)]))}const r=t(i,[["render",n]]),p=JSON.parse('{"path":"/books/UnderStandingTheJvm/6.%E7%B1%BB%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84%EF%BC%88%E4%B8%8B%EF%BC%89.html","title":"6.类文件结构（下）","lang":"zh-CN","frontmatter":{"order":6,"description":"6.类文件结构（下） 字节码指令简介 Java虚拟机的指令由一个字节长度的、代表着某种特定操作含义的数字（称为操作码，Opcode）以及跟随其后的零至多个代表此操作所需的参数（称为操作数，Operand）构成。 字节码与数据类型 部分特殊的字符来表明专门为哪种数据类型服务：i代表对int类型的数据操作，l代表long，s代表short，b代表byte，...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"6.类文件结构（下）\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-12-30T02:58:44.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"憨憨十二\\",\\"url\\":\\"https://mister-hope.com\\"}]}"],["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/my-docs/books/UnderStandingTheJvm/6.%E7%B1%BB%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84%EF%BC%88%E4%B8%8B%EF%BC%89.html"}],["meta",{"property":"og:site_name","content":"一切为了更好的自己"}],["meta",{"property":"og:title","content":"6.类文件结构（下）"}],["meta",{"property":"og:description","content":"6.类文件结构（下） 字节码指令简介 Java虚拟机的指令由一个字节长度的、代表着某种特定操作含义的数字（称为操作码，Opcode）以及跟随其后的零至多个代表此操作所需的参数（称为操作数，Operand）构成。 字节码与数据类型 部分特殊的字符来表明专门为哪种数据类型服务：i代表对int类型的数据操作，l代表long，s代表short，b代表byte，..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-12-30T02:58:44.000Z"}],["meta",{"property":"article:modified_time","content":"2024-12-30T02:58:44.000Z"}]]},"git":{"createdTime":1701870112000,"updatedTime":1735527524000,"contributors":[{"name":"hanhan12","username":"hanhan12","email":"1607077440@qq.com","commits":1,"url":"https://github.com/hanhan12"},{"name":"consen3464","username":"consen3464","email":"wangkai@consen.net","commits":4,"url":"https://github.com/consen3464"}]},"readingTime":{"minutes":10.49,"words":3148},"filePathRelative":"books/UnderStandingTheJvm/6.类文件结构（下）.md","autoDesc":true}');export{r as comp,p as data};
